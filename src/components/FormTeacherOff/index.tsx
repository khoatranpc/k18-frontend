import React, { useEffect, useState } from 'react';
import { Button, DatePicker, Form, Input, Select } from 'antd';
import { DefaultOptionType } from 'antd/es/select';
import Image from 'next/image';
import ResizeObserver from 'react-resize-observer';
import { useFormik } from 'formik';
import * as yup from 'yup';
import { Obj } from '@/global/interface';
import { useQueryBookTeacher } from '@/utils/hooks';
import { getClassResponsive } from '@/utils';
import SelectClass from './SelectClass';

const validationSchema = yup.object({
    email: yup.string().email('Email ch∆∞a ƒë√∫ng ƒë·ªãnh d·∫°ng!').required('B·∫°n c·∫ßn cung c·∫•p email!'),
    name: yup.string().required('B·∫°n c·∫ßn cung c·∫•p t√™n!'),
    codeClass: yup.string().required('B·∫°n c·∫ßn cung c·∫•p m√£ l·ªõp!'),
    group: yup.string().required('B·∫°n c·∫ßn cung c·∫•p th√¥ng tin nh√≥m d·∫°y!'),
    date: yup.string().required('B·∫°n c·∫ßn ch·ªçn ng√†y ngh·ªâ!'),
    lessonNote: yup.string().required('B·∫°n c·∫ßn cung c·∫•p th√¥ng tin b√†i d·∫°y!'),
});
const FormTeacherOff = () => {
    const groupClass = useQueryBookTeacher('GET');
    const [containerSize, setContainerSize] = useState<number>(0);
    const getGroupClass: DefaultOptionType[] = (groupClass.data?.response?.data as Obj[])?.map((item) => {
        return {
            value: item._id,
            label: `Nh√≥m: ${item.groupNumber} - ${item.locationId?.locationCode}`
        }
    }) ?? []
    const { values, errors, touched, setFieldValue, handleBlur, handleChange, handleSubmit } = useFormik({
        initialValues: {
            email: '',
            codeClass: '',
            group: '',
            date: '',
            lessonNote: '',
            name: '',
        },
        validationSchema,
        onSubmit(values) {
            console.log("üöÄ ~ onSubmit ~ values:", values)

        }
    });
    useEffect(() => {
        if (values.codeClass) {
            groupClass.query?.(values.codeClass as string);
        }
    }, [values.codeClass]);
    return (
        <div className={`formTeacherOff min-h-[100vh] bg-[#ffe6e6] py-[2.4rem] ${containerSize ? getClassResponsive(containerSize) : ''}`}>
            <ResizeObserver
                onResize={(rect) => {
                    setContainerSize(rect.width);
                }}
            />
            <div className="content rounded-[2.4rem] w-[70vw] m-auto p-[2.4rem]">
                <div className='bg-[white] p-[1.2rem] rounded-[1.2rem]'>
                    <div className="title  mb-[1.2rem]">
                        <div className='text-center'>
                            <Image className='' src={'/static/mindx.png'} alt='mindx-school' width={200} height={200} />
                        </div>
                        <h1 className="text-center text-[3.6rem] font-bold mb-[1.2rem]">Mindx School - Y√™u c·∫ßu ngh·ªâ ph√©p</h1>
                        <p className='text-center text-[1.8rem]'>Form th√¥ng tin d√†nh cho gi√°o vi√™n t·∫°i MindX</p>
                    </div>
                    <hr />
                    <div className="process w-fit ml-[5.2rem] my-[1.2rem]">
                        <h2 className='text-[1.8rem] font-bold mb-[1.2rem]'>Quy tr√¨nh th·ª±c hi·ªán</h2>
                        <ul className='px-[3.6rem] list-decimal'>
                            <li>ƒêi·ªÅn Form th√¥ng tin xin off</li>
                            <li>Th√¥ng b√°o cho TE - Qu·∫£n l√Ω GV</li>
                            <li>B√†n giao l·∫°i th√¥ng tin l·ªõp h·ªçc cho gi√°o vi√™n thay th·∫ø (T√†i li·ªáu, b√†i t·∫≠p,...)</li>
                        </ul>
                        <h2 className='text-[1.8rem] font-bold my-[1.2rem]'>Ch√∫ √Ω</h2>
                        <ul className='px-[3.6rem] list-decimal'>
                            <li>S·ªë bu·ªïi ngh·ªâ t·ªëi ƒëa c·ªßa m·ªôt l·ªõp: 3</li>
                            <li>C·∫ßn th√¥ng b√°o tr∆∞·ªõc: 36h cho TE, CS</li>
                            <li>Ch·ªâ ƒëƒÉng k√Ω Off th√¥ng qua form n√†y m·ªõi ƒë∆∞·ª£c t√≠nh h·ª£p l·ªá</li>
                            <li>N·∫øu mu·ªën xin ngh·ªâ nhi·ªÅu, vui l√≤ng ƒëi·ªÅn form nhi·ªÅu l·∫ßn</li>
                        </ul>
                    </div>
                </div>
                <div className="collectInf mt-[1.2rem]">
                    <Form
                        onFinish={handleSubmit}
                        layout='vertical'
                    >
                        <div className="registerPersonelInfo mb-[1.2rem] flex gap-[2.4rem] bg-[white] p-[1.2rem] rounded-[1.2rem]">
                            <h2 className='text-[1.8rem] text-left font-bold min-w-[30%]'>ƒêƒÉng k√Ω th√¥ng tin</h2>
                            <div className="formRegisterPersonelInfo flex-1">
                                <Form.Item
                                    label={"Email:"}
                                    required
                                    name="email"
                                >
                                    <Input placeholder='Email c·ªßa b·∫°n' name='email' onChange={handleChange} />
                                    {errors.email && touched.email && <p className='text-[red]'>{errors.email}</p>}
                                </Form.Item>
                                <Form.Item
                                    label={"H·ªç t√™n:"}
                                    required
                                    name="name"
                                >
                                    <Input placeholder='H·ªç t√™n' name='name' onChange={handleChange} />
                                    {errors.name && touched.name && <p className='text-[red]'>{errors.name}</p>}
                                </Form.Item>
                            </div>
                        </div>
                        <div className="groupInfo flex gap-[2.4rem] bg-[white] p-[1.2rem] rounded-[1.2rem]">
                            <h2 className='text-[1.8rem] text-left font-bold min-w-[30%]'>Th√¥ng tin l·ªõp xin ngh·ªâ</h2>
                            <div className="formRegisterGroupInfo flex-1">
                                <Form.Item
                                    label={"M√£ l·ªõp:"}
                                    required
                                    name="codeClass"
                                    initialValue={values.codeClass}
                                >
                                    <SelectClass
                                        onSelect={(value) => {
                                            setFieldValue('codeClass', value);
                                        }}
                                    />
                                    {errors.codeClass && touched.name && <p className='text-[red]'>{errors.codeClass}</p>}
                                </Form.Item>
                                <Form.Item
                                    label={<p> Nh√≥m: <br /><small>H√£y ch·ªçn l·ªõp ƒë·ªÉ hi·ªÉn th·ªã nh√≥m</small></p>}
                                    required
                                    name="group"
                                >
                                    <Select
                                        value={values.group}
                                        options={getGroupClass}
                                        onChange={(value) => {
                                            setFieldValue('group', value);
                                        }}
                                    />
                                    {errors.group && errors.group && <p className='text-[red]'>{errors.group}</p>}
                                </Form.Item>
                                <Form.Item
                                    label={"Ng√†y"}
                                    required
                                    name="date"
                                >
                                    <DatePicker
                                        size='small'
                                        placeholder='Ng√†y/Th√°ng/NƒÉm'
                                        format={'DD/MM/YYYY'} onChange={(value) => {
                                            setFieldValue('date', value?.toString() && new Date(value?.toString()));
                                        }} />
                                    {errors.date && touched.date && <p className='text-[red]'>{errors.date}</p>}
                                </Form.Item>
                                <Form.Item
                                    label={"Bu·ªïi s·ªë, ki·∫øn th·ª©c:"}
                                    required
                                    name="lessonNote"
                                >
                                    <Input.TextArea style={{ resize: 'none' }} placeholder='VD: Bu·ªïi 2, Python' name='lessonNote' onChange={handleChange} />
                                    {errors.lessonNote && touched.lessonNote && <p className='text-[red]'>{errors.lessonNote}</p>}
                                </Form.Item>
                                <Form.Item
                                    label={"T√†i li·ªáu ƒë√≠nh k√®m (n·∫øu c√≥):"}
                                    name="note"
                                >
                                    <Input.TextArea style={{ resize: 'none' }} name='note' />
                                </Form.Item>
                            </div>
                        </div>
                        <Form.Item>
                            <Button className="float-left bg-[white] text-[var(--base)]" htmlType='submit' size='small'>Reset</Button>
                            <Button className="float-right bg-[white] text-[var(--base)]" htmlType='submit' size='small'>ƒêƒÉng k√Ω</Button>
                        </Form.Item>
                    </Form>
                </div>
            </div>
        </div>
    )
}

export default FormTeacherOff;